<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.iebbuda.mozi.domain.user.mapper.UserMapper">

    <resultMap id="authMap" type="AuthVO">
        <result property="userId" column="user_id"/>
        <result property="auth" column="auth"/>
    </resultMap>
    <resultMap id="userMap" type="UserVO">
        <id property="userId" column="user_id"/>
        <result property="username" column="username"/>
        <result property="loginId" column="login_id"/>
        <result property="password" column="password" />
        <result property="phoneNumber" column="phone_number"/>
        <result property="email" column="email" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="mainBank" column="main_bank"/>
        <result property="birthDate" column="birth_date"/>
        <result property="provider" column="provider"/>
        <result property="providerId" column="provider_id"/>
        <collection property="authList" resultMap="authMap" />
    </resultMap>

    <insert id="insert" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO User(username, login_id, password, phone_number, email, birth_date, provider, provider_id)
        VALUES (#{username}, #{loginId}, #{password}, #{phoneNumber}, #{email}, #{birthDate}, #{provider}, #{providerId})
    </insert>

    <insert id="insertAuth">
        INSERT INTO Auth(user_id,auth)
        values (#{userId},#{auth})
    </insert>

    <!-- 기존 쿼리들 유지 -->
    <select id="findByUserId" resultMap="userMap">
        SELECT u.user_id, u.username, u.login_id, u.password, u.phone_number, u.email,
               u.created_at, u.updated_at, u.birth_date, u.provider, u.provider_id, a.auth
        FROM User u
                 LEFT OUTER JOIN Auth a ON u.user_id = a.user_id
        WHERE u.user_id = #{userId}
    </select>

    <select id="findByLoginId" resultMap="userMap">
        SELECT u.user_id, u.username, u.login_id, u.password, u.phone_number, u.email,
               u.created_at, u.updated_at, u.birth_date, u.provider, u.provider_id, a.auth
        FROM User u
                 LEFT OUTER JOIN Auth a ON u.user_id = a.user_id
        WHERE u.login_id = #{loginId}
    </select>

    <select id="findLoginIdByEmail" resultType="String">
        SELECT login_id
        FROM User
        WHERE username = #{username} AND email=#{email}
    </select>
    <select id="findLoginIdByPhoneNumber" resultType="String">
        SELECT login_id
        FROM User
        WHERE username = #{username} AND phone_number = #{phoneNumber}
    </select>

    <!-- 사용자 비밀번호 업데이트 -->
    <update id="updateUserPassword">
        UPDATE User
        SET password = #{password},
            updated_at = #{updatedAt}
        WHERE user_id = #{userId}
    </update>

    <!-- 이메일로 사용자 조회 (중복 확인용) -->
    <!-- 이메일로 사용자 조회 (중복 확인용) - OAuth 필드 추가 -->
    <select id="findByEmail" resultMap="userMap">
        SELECT u.user_id, u.username, u.login_id, u.password, u.phone_number, u.email,
               u.created_at, u.updated_at, u.birth_date, u.provider, u.provider_id, a.auth
        FROM User u
                 LEFT OUTER JOIN Auth a ON u.user_id = a.user_id
        WHERE u.email = #{email}
    </select>

    <!-- 로그인ID와 이메일로 사용자 찾기 -->
    <select id="findByLoginIdAndEmail" resultType="UserVO">
        SELECT
            user_id,
            login_id AS loginId,
            email,
            username,
            password,
            created_at AS createdAt,
            updated_at AS updatedAt,
            provider,
            provider_id AS providerId
        FROM User
        WHERE login_id = #{loginId}
          AND email = #{email}
    </select>

    <!-- 사용자 기본 정보 수정 (이메일, 전화번호) -->
    <update id="updateUserInfo">
        UPDATE User
        SET
            email = #{email},
            phone_number = #{phoneNumber},
            updated_at = NOW()
        WHERE login_id = #{loginId}
    </update>

    <!-- 마이페이지 비밀번호 변경 (로그인된 상태) -->
    <update id="updatePasswordByLoginId">
        UPDATE User
        SET
            password = #{newPassword},
            updated_at = NOW()
        WHERE login_id = #{loginId}
    </update>

    <!-- OAuth 관련 쿼리들 -->

    <!-- Provider와 ProviderId로 사용자 조회 -->
    <select id="findByProviderAndProviderId" resultMap="userMap">
        SELECT u.user_id, u.username, u.login_id, u.password, u.phone_number, u.email,
               u.created_at, u.updated_at, u.birth_date, u.provider, u.provider_id, a.auth
        FROM User u
                 LEFT OUTER JOIN Auth a ON u.user_id = a.user_id
        WHERE u.provider = #{provider}
          AND u.provider_id = #{providerId}
    </select>
    <select id="getMainBankCodeByUserId" resultType="java.lang.String">
        SELECT IFNULL(main_bank, '') FROM user
        where user_id=#{userId}
    </select>
    <select id="getbirthDateByUserId" resultType="java.util.Date">
        select birth_date from user
        where user_id=#{userId}
    </select>

    <!-- 기존 사용자를 OAuth 연동으로 업데이트 (확장 가능) -->
    <update id="updateUserToOAuth">
        UPDATE User
        SET
            provider = #{provider},
            provider_id = #{providerId},
            updated_at = NOW()
        WHERE user_id = #{userId}
    </update>
    <update id="clearMainBankByUserId">
        UPDATE user
        SET main_bank = NULL
        WHERE user_id = #{userId};
    </update>
    <update id="updateMainBankCodeByUserId">
        update user
        set main_bank=#{bankCode}
        where user_id=#{userId}
    </update>
</mapper>

