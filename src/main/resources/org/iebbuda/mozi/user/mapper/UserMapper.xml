<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.iebbuda.mozi.user.mapper.UserMapper">

    <resultMap id="authMap" type="AuthVO">
        <result property="userId" column="user_id"/>
        <result property="auth" column="auth"/>
    </resultMap>
    <resultMap id="userMap" type="UserVO">
        <id property="userId" column="user_id"/>
        <result property="username" column="username"/>
        <result property="loginId" column="login_id"/>
        <result property="password" column="password" />
        <result property="phoneNumber" column="phone_number"/>
        <result property="email" column="email" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="mainBank" column="main_bank"/>
        <result property="birthDate" column="birth_date"/>
        <collection property="authList" resultMap="authMap" />
    </resultMap>

    <insert id="insert" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO User(username, login_id, password, phone_number, email,birth_date)
        VALUES (#{username},#{loginId},#{password},#{phoneNumber},#{email},#{birthDate})
    </insert>

    <insert id="insertAuth">
        INSERT INTO Auth(user_id,auth)
        values (#{userId},#{auth})
    </insert>

    <select id="findByUserId"  resultMap="userMap">
        SELECT u.user_id, u.username, u.login_id, u.password, u.phone_number, u.email,
               u.created_at, u.updated_at, u.birth_date, a.auth
        FROM User u
        LEFT OUTER JOIN Auth a
        ON u.user_id = a.user_id
        where u.user_id = #{userId}
    </select>

    <select id="findByLoginId" resultMap="userMap">
        SELECT * FROM User WHERE login_id = #{loginId}
    </select>
    <select id="findLoginIdByEmail" resultType="String">
        SELECT login_id
        FROM User
        WHERE username = #{username} AND email=#{email}
    </select>
    <select id="findLoginIdByPhoneNumber" resultType="String">
        SELECT login_id
        FROM User
        WHERE username = #{username} AND phone_number = #{phoneNumber}
    </select>

    <!-- 사용자 비밀번호 업데이트 -->
    <update id="updateUserPassword">
        UPDATE User
        SET password = #{password},
            updated_at = #{updatedAt}
        WHERE user_id = #{userId}
    </update>

    <!-- 로그인ID와 이메일로 사용자 찾기 -->
    <select id="findByLoginIdAndEmail" resultType="UserVO">
        SELECT
            user_id,
            login_id AS loginId,
            email,
            username,
            password,
            created_at AS createdAt,
            updated_at AS updatedAt
        FROM User
        WHERE login_id = #{loginId}
          AND email = #{email}
    </select>

    <!-- 사용자 기본 정보 수정 (이메일, 전화번호) -->
    <update id="updateUserInfo">
        UPDATE User
        SET
            email = #{email},
            phone_number = #{phoneNumber},
            updated_at = NOW()
        WHERE login_id = #{loginId}
    </update>

    <!-- 마이페이지 비밀번호 변경 (로그인된 상태) -->
    <update id="updatePasswordByLoginId">
        UPDATE User
        SET
            password = #{newPassword},
            updated_at = NOW()
        WHERE login_id = #{loginId}
    </update>
</mapper>

